# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class PapergridQtyP(models.Model):
    inc = models.FloatField(db_column='Inc')  
    dackle_dim = models.FloatField(db_column='Dackle_Dim')  
    grain_dim = models.FloatField(db_column='Grain_Dim')  
    ups = models.IntegerField(db_column='Ups')  
    areapercarton_sqinch = models.FloatField(db_column='AreaPerCarton_SqInch')  
    scan = models.IntegerField(db_column='Scan')  
    grain = models.CharField(db_column='Grain', max_length=10)  
    machineid = models.CharField(db_column='MachineID', max_length=10)  
    machinename = models.CharField(db_column='MachineName', max_length=60)  
    noofpass_req = models.IntegerField(db_column='NoOfPass_req')  
    mat_x = models.IntegerField(db_column='Mat_X')  
    mat_y = models.IntegerField(db_column='Mat_Y')  
    dielength_in_inch = models.FloatField(db_column='DieLength_In_Inch', blank=True, null=True)  
    qty = models.FloatField(db_column='Qty')  
    f_color = models.IntegerField(db_column='F_Color')  
    b_color = models.IntegerField(db_column='B_Color')  
    die_planheight = models.FloatField(db_column='Die_PlanHeight')  
    die_planwidth = models.FloatField(db_column='Die_PlanWidth')  
    fullsheet_d = models.FloatField(db_column='FullSheet_D')  
    fullsheet_g = models.FloatField(db_column='FullSheet_G')  
    fullsheet_grain = models.CharField(db_column='FullSheet_Grain', max_length=10)  
    fullsheet_cut_x = models.IntegerField(db_column='FullSheet_Cut_X')  
    fullsheet_cut_y = models.IntegerField(db_column='FullSheet_Cut_Y')  
    fullsheet_ups = models.IntegerField(db_column='FullSheet_Ups')  
    sheets_a = models.FloatField(db_column='Sheets_A')  
    heightcut = models.IntegerField(db_column='HeightCut')  
    widthcut = models.IntegerField(db_column='WidthCut')  
    lengthremaining = models.FloatField(db_column='LengthRemaining')  
    widthremaining = models.FloatField(db_column='WidthRemaining')  
    itemsinfirstcut = models.IntegerField(db_column='ItemsInFirstCut')  
    totalcuts = models.IntegerField(db_column='TotalCuts')  
    totalbox = models.IntegerField(db_column='TotalBox')  
    dackle_dim_b = models.FloatField(db_column='Dackle_Dim_B')  
    grain_dim_b = models.FloatField(db_column='Grain_Dim_B')  
    ups_b = models.IntegerField(db_column='Ups_B')  
    mat_x_b = models.IntegerField(db_column='Mat_X_B')  
    mat_y_b = models.IntegerField(db_column='Mat_Y_B')  
    cuts_b = models.IntegerField(db_column='Cuts_B')  
    sheets_b = models.FloatField(db_column='Sheets_B')  
    dackle_dim_c = models.FloatField(db_column='Dackle_Dim_C')  
    grain_dim_c = models.FloatField(db_column='Grain_Dim_C')  
    ups_c = models.IntegerField(db_column='Ups_C')  
    mat_x_c = models.IntegerField(db_column='Mat_X_C')  
    mat_y_c = models.IntegerField(db_column='Mat_Y_C')  
    cuts_c = models.IntegerField(db_column='Cuts_C')  
    sheets_c = models.FloatField(db_column='Sheets_C')  
    dackle_dim_d = models.FloatField(db_column='Dackle_Dim_D')  
    grain_dim_d = models.FloatField(db_column='Grain_Dim_D')  
    ups_d = models.IntegerField(db_column='Ups_D')  
    mat_x_d = models.IntegerField(db_column='Mat_X_D')  
    mat_y_d = models.IntegerField(db_column='Mat_Y_D')  
    cuts_d = models.IntegerField(db_column='Cuts_D')  
    sheets_d = models.FloatField(db_column='Sheets_D')  
    dackle_dim_tot = models.FloatField(db_column='Dackle_Dim_Tot')  
    grain_dim_tot = models.FloatField(db_column='Grain_Dim_Tot')  
    wastage_x = models.FloatField(db_column='Wastage_X')  
    wastage_y = models.FloatField(db_column='Wastage_Y')  
    wastage_weight_kg_a = models.FloatField(db_column='Wastage_Weight_kg_A')  
    wastage_weight_kg_b = models.FloatField(db_column='Wastage_Weight_kg_B')  
    wastage_weight_kg = models.FloatField(db_column='Wastage_Weight_kg')  
    utilizationper = models.FloatField(db_column='UtilizationPer')  
    fullsheet_req = models.FloatField(db_column='FullSheet_Req')  
    paperid = models.CharField(db_column='PaperID', max_length=10)  
    gsm = models.IntegerField(db_column='Gsm')  
    paper_rate = models.FloatField(db_column='Paper_Rate')  
    paper_unit = models.CharField(db_column='Paper_Unit', max_length=10)  
    print_size_sheets = models.FloatField(db_column='Print_Size_Sheets')  
    print_impression = models.IntegerField(db_column='Print_Impression')  
    paper_kg = models.FloatField(db_column='Paper_Kg')  
    paper_kg_fullsheet = models.FloatField(db_column='Paper_Kg_FullSheet')  
    paper_amt = models.FloatField(db_column='Paper_Amt')  
    punchdie_amt = models.FloatField(db_column='PunchDie_Amt')  
    plate_amt = models.FloatField(db_column='Plate_Amt')  
    prmake_ready_amt = models.FloatField(db_column='PrMake_Ready_Amt')  
    printing_amt = models.FloatField(db_column='Printing_Amt')  
    total_amt = models.FloatField(db_column='Total_Amt')  
    pn_mcid = models.CharField(db_column='PN_McID', max_length=10)  
    pn_machinename = models.CharField(db_column='PN_MachineName', max_length=60)  
    pn_maxdackle = models.IntegerField(db_column='PN_MaxDackle')  
    pn_mindackle = models.IntegerField(db_column='PN_MinDackle')  
    pn_maxgrain = models.IntegerField(db_column='PN_MaxGrain')  
    pn_mingrain = models.IntegerField(db_column='PN_MinGrain')  
    pn_gripper = models.IntegerField(db_column='PN_Gripper')  
    pn_makerdy_amt = models.FloatField(db_column='PN_MakeRdy_Amt', blank=True, null=True)  
    pn_punching_amt = models.FloatField(db_column='PN_Punching_Amt', blank=True, null=True)  

    class Meta:
        managed = False
        db_table = 'PaperGrid_Qty_P'
